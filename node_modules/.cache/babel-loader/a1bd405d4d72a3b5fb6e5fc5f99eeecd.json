{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\shiarora\\\\Projects\\\\cypress-egghead-course\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\shiarora\\\\Projects\\\\cypress-egghead-course\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createTodo),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchTodos),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(destroyTodo),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(destroyAllTodos),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(editTodo),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(completeAllTodos),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(bulkEditTodos),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, takeLatest, put, all, select } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction getBaseUrl() {\n  return 'http://localhost:3000';\n}\n\nfunction createTodo(action) {\n  return _regeneratorRuntime.wrap(function createTodo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return axios.post(\"\".concat(getBaseUrl(), \"/api/todos\"), {\n            text: action.text,\n            completed: false\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nexport function fetchTodos() {\n  var response, todos;\n  return _regeneratorRuntime.wrap(function fetchTodos$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return axios.get(\"\".concat(getBaseUrl(), \"/api/todos\"));\n\n        case 2:\n          response = _context2.sent;\n          todos = response.data;\n          _context2.next = 6;\n          return put({\n            type: \"TODOS_LOADED\",\n            todos: todos\n          });\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\nexport function destroyTodo(action) {\n  return _regeneratorRuntime.wrap(function destroyTodo$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return axios.delete(\"\".concat(getBaseUrl(), \"/api/todos/\").concat(action.id));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\nexport function destroyAllTodos() {\n  var filtered;\n  return _regeneratorRuntime.wrap(function destroyAllTodos$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(function (state) {\n            return state.todos.filter(function (todo) {\n              return todo.completed;\n            });\n          });\n\n        case 2:\n          filtered = _context4.sent;\n          _context4.next = 5;\n          return put({\n            type: 'LOCAL_CLEAR_COMPLETED'\n          });\n\n        case 5:\n          _context4.next = 7;\n          return axios.post(\"\".concat(getBaseUrl(), \"/api/todos/bulk_delete\"), {\n            ids: filtered.map(function (f) {\n              return f.id;\n            })\n          });\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\nexport function editTodo(action) {\n  return _regeneratorRuntime.wrap(function editTodo$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return axios.put(\"\".concat(getBaseUrl(), \"/api/todos/\").concat(action.id), action.todo);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\nexport function completeAllTodos() {\n  var todos, allAreMarked, newTodos;\n  return _regeneratorRuntime.wrap(function completeAllTodos$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return select(function (state) {\n            return state.todos;\n          });\n\n        case 2:\n          todos = _context6.sent;\n          allAreMarked = todos.every(function (todo) {\n            return todo.completed;\n          });\n          newTodos = todos.map(function (todo) {\n            return _objectSpread({}, todo, {\n              completed: !allAreMarked\n            });\n          });\n          _context6.next = 7;\n          return put({\n            type: 'BULK_EDIT_TODOS',\n            todos: newTodos\n          });\n\n        case 7:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\nexport function bulkEditTodos(action) {\n  return _regeneratorRuntime.wrap(function bulkEditTodos$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return axios.put(\"\".concat(getBaseUrl(), \"/api/todos/bulk_update\"), {\n            todos: action.todos\n          });\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this);\n}\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([takeLatest(\"FETCH_TODOS\", fetchTodos), takeEvery(\"ADD_TODO\", createTodo), takeEvery(\"DELETE_TODO\", destroyTodo), takeEvery(\"EDIT_TODO\", editTodo), takeLatest(\"CLEAR_COMPLETED\", destroyAllTodos), takeEvery(\"COMPLETE_ALL_TODOS\", completeAllTodos), takeEvery(\"BULK_EDIT_TODOS\", bulkEditTodos)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, this);\n}","map":{"version":3,"sources":["C:\\Users\\shiarora\\Projects\\cypress-egghead-course\\src\\sagas\\TodoSagas.js"],"names":["createTodo","fetchTodos","destroyTodo","destroyAllTodos","editTodo","completeAllTodos","bulkEditTodos","rootSaga","takeEvery","takeLatest","put","all","select","axios","getBaseUrl","action","post","text","completed","get","response","todos","data","type","delete","id","state","filter","todo","filtered","ids","map","f","allAreMarked","every","newTodos"],"mappings":"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","sourcesContent":["import { takeEvery, takeLatest, put, all, select } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nfunction getBaseUrl() {\r\n  return 'http://localhost:3000'\r\n}\r\n\r\nfunction* createTodo(action) {\r\n  yield axios.post(`${getBaseUrl()}/api/todos`, {text: action.text, completed: false})\r\n}\r\n\r\nexport function* fetchTodos() {\r\n  let response = yield axios.get(`${getBaseUrl()}/api/todos`)\r\n  let todos = response.data;\r\n\r\n  yield put({ type: \"TODOS_LOADED\", todos });\r\n}\r\n\r\nexport function* destroyTodo(action) {\r\n  yield axios.delete(`${getBaseUrl()}/api/todos/${action.id}`)\r\n}\r\n\r\nexport function* destroyAllTodos() {\r\n  let filtered = yield select(state => state.todos.filter(todo => todo.completed))\r\n  yield put({type: 'LOCAL_CLEAR_COMPLETED'})\r\n  \r\n  yield axios.post(`${getBaseUrl()}/api/todos/bulk_delete`, {ids: filtered.map(f => f.id)})\r\n}\r\n\r\nexport function* editTodo(action) {\r\n  yield axios.put(`${getBaseUrl()}/api/todos/${action.id}`, action.todo)\r\n}\r\n\r\nexport function* completeAllTodos() {\r\n  let todos = yield select(state => state.todos)\r\n  let allAreMarked = todos.every(todo => todo.completed)\r\n  let newTodos = todos.map((todo) => {\r\n    return { ...todo, completed: !allAreMarked }\r\n  })\r\n\r\n  yield put({ type: 'BULK_EDIT_TODOS', todos: newTodos })\r\n}\r\n\r\nexport function* bulkEditTodos(action) {\r\n  yield axios.put(`${getBaseUrl()}/api/todos/bulk_update`, {todos: action.todos})\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    takeLatest(\"FETCH_TODOS\", fetchTodos),\r\n    takeEvery(\"ADD_TODO\", createTodo),\r\n    takeEvery(\"DELETE_TODO\", destroyTodo),\r\n    takeEvery(\"EDIT_TODO\", editTodo),\r\n    takeLatest(\"CLEAR_COMPLETED\", destroyAllTodos),\r\n    takeEvery(\"COMPLETE_ALL_TODOS\", completeAllTodos),\r\n    takeEvery(\"BULK_EDIT_TODOS\", bulkEditTodos),\r\n  ])\r\n}"]},"metadata":{},"sourceType":"module"}